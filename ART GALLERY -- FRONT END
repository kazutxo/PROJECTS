import mysql.connector

from tabulate import tabulate

def connect_db():

    return mysql.connector.connect(host="localhost",user="root",password="admin@123",

database="art_gallery")

#Adding data of artists and related data

def add_artist():

    name = input("Enter Artist's Name: ")

    bio = input("Enter Artist's Bio: ")

    contact_info = input("Enter Artist's Contact Info: ")

    conn = connect_db()

    cursor = conn.cursor()

    cursor.execute("INSERT INTO artist (name, bio, contact_info) VALUES (%s, %s, %s)",

                   (name, bio, contact_info))

    conn.commit()

    # Fetch the last inserted artist_id

    artist_id = cursor.lastrowid

    print(f"Artist added successfully with Artist ID: {artist_id}")

    conn.close()

def add_artwork():

    artist_id = input("Enter Artist ID: ")

    title = input("Enter Artwork Title: ")

    medium = input("Enter Artwork Medium: ")

    size = input("Enter Artwork Size: ")

    price = float(input("Enter Artwork Price: "))

    conn = connect_db()

    cursor = conn.cursor()

    cursor.execute("INSERT INTO artworks (artist_id, title, medium, size, price) VALUES (%s, %s, %s, %s, %s)",(artist_id, title, medium, size, price))

    conn.commit()

    print("Artwork added successfully.")

    conn.close()

def add_exhibition():

    artist_id = input("Enter Artist ID: ")

    title = input("Enter Exhibition Title: ")

    location = input("Enter Exhibition Location: ")

    start_date = input("Enter Start Date (YYYY-MM-DD): ")

    end_date = input("Enter End Date (YYYY-MM-DD): ")

    conn = connect_db()

    cursor = conn.cursor()

    cursor.execute("INSERT INTO exhibition (artist_id, title, location, start_date, end_date) VALUES (%s, %s, %s, %s, %s)",(artist_id, title, location, start_date, end_date))

    conn.commit()

    print("Exhibition added successfully.")

    conn.close()

def add_sale():

    artist_id = input("Enter Artist ID: ")

    artwork_id = input("Enter Artwork ID: ")

    client_name = input("Enter Client Name: ")

    sale_date = input("Enter Sale Date (YYYY-MM-DD): ")

    sale_price = float(input("Enter Sale Price: "))

    conn = connect_db()

    cursor = conn.cursor()

    cursor.execute("INSERT INTO sales (artist_id, artwork_id, client_name, sale_date, sale_price) VALUES (%s, %s, %s, %s, %s)",(artist_id, artwork_id, client_name, sale_date, sale_price))

    conn.commit()

    print("Sale recorded successfully.")

    conn.close()

#Update data

def update_artist():

    artist_id = input("Enter Artist ID to update: ")

    conn = connect_db()

    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT * FROM artist WHERE artist_id = %s", (artist_id,))

    artist = cursor.fetchone()

    if artist:

        print("Current Artist Details:", artist)

        name = input(f"Enter new name (leave empty to keep '{artist['name']}'): ") or artist['name']

        bio = input(f"Enter new bio (leave empty to keep '{artist['bio']}'): ") or artist['bio']

        contact_info = input(f"Enter new contact info (leave empty to keep '{artist['contact_info']}'): ") or artist['contact_info']

        cursor.execute("UPDATE artist SET name = %s, bio = %s, contact_info = %s WHERE artist_id = %s",(name, bio, contact_info, artist_id))

        conn.commit()

        print("Artist details updated successfully.")

    else:

        print("Artist not found.")

    conn.close()

def update_artwork():

    artwork_id = input("Enter Artwork ID to update: ")

    conn = connect_db()

    cursor = conn.cursor(dictionary=True)   

    cursor.execute("SELECT * FROM artworks WHERE artwork_id = %s", (artwork_id,))

    artwork = cursor.fetchone()

    if artwork:

        print("Current Artwork Details:", artwork)

        title = input(f"Enter new title (leave empty to keep '{artwork['title']}'): ") or artwork['title']

        medium = input(f"Enter new medium (leave empty to keep '{artwork['medium']}'): ") or artwork['medium']

        size = input(f"Enter new size (leave empty to keep '{artwork['size']}'): ") or artwork['size']

        price = input(f"Enter new price (leave empty to keep '{artwork['price']}'): ") or artwork['price']    

        cursor.execute("UPDATE artworks SET title = %s, medium = %s, size = %s, price = %s WHERE artwork_id = %s",(title, medium, size, price, artwork_id))

        conn.commit()

        print("Artwork details updated successfully.")

    else:

        print("Artwork not found.")

    conn.close()

def update_exhibition():

    exhibition_id = input("Enter Exhibition ID to update: ")

    conn = connect_db()

    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT * FROM exhibition WHERE exhibition_id = %s", (exhibition_id,))

    exhibition = cursor.fetchone()

    if exhibition:

        print("Current Exhibition Details:", exhibition)

        title = input(f"Enter new title (leave empty to keep '{exhibition['title']}'): ") or exhibition['title']

        location = input(f"Enter new location (leave empty to keep '{exhibition['location']}'): ") or exhibition['location']

        start_date = input(f"Enter new start date (leave empty to keep '{exhibition['start_date']}'): ") or exhibition['start_date']

        end_date = input(f"Enter new end date (leave empty to keep '{exhibition['end_date']}'): ") or exhibition['end_date']

        cursor.execute("UPDATE exhibition SET title = %s, location = %s, start_date = %s, end_date = %s WHERE exhibition_id = %s",(title, location, start_date, end_date, exhibition_id))

        conn.commit()

        print("Exhibition details updated successfully.")

    else:

        print("Exhibition not found.")

    conn.close()

def update_sale():

    sale_id = input("Enter Sale ID to update: ")

    conn = connect_db()

    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT * FROM sales WHERE sale_id = %s", (sale_id,))

    sale = cursor.fetchone()

    if sale:

        print("Current Sale Details:", sale)

        client_name = input(f"Enter new client name (leave empty to keep '{sale['client_name']}'): ") or sale['client_name']

        sale_date = input(f"Enter new sale date (leave empty to keep '{sale['sale_date']}'): ") or sale['sale_date']

        sale_price = input(f"Enter new sale price (leave empty to keep '{sale['sale_price']}'): ") or sale['sale_price']

        cursor.execute("UPDATE sales SET client_name = %s, sale_date = %s, sale_price = %s WHERE sale_id = %s",(client_name, sale_date, sale_price, sale_id))

        conn.commit()

        print("Sale details updated successfully.")

    else:

        print("Sale not found.")

    conn.close()

# Update Data Menu

def update_data_menu():

    while True:

        print("\nUpdate Data Menu")

        print("1. Update Artist")

        print("2. Update Artwork")

        print("3. Update Exhibition")

        print("4. Update Sale")

        print("5. Go Back")

        choice = input("Enter your choice: ")

        if choice == '1':

            update_artist()

        elif choice == '2':

            update_artwork()

        elif choice == '3':

            update_exhibition()

        elif choice == '4':

            update_sale()

        elif choice == '5':

            break

        else:

            print("Invalid choice. Please try again.")

# Delete Artist and Related Data

def delete_artist():

    artist_id = input("Enter Artist ID to delete: ")

    conn = connect_db()

    cursor = conn.cursor()

    cursor.execute("DELETE FROM artworks WHERE artist_id = %s", (artist_id,))

    cursor.execute("DELETE FROM exhibition WHERE artist_id = %s", (artist_id,))

    cursor.execute("DELETE FROM sales WHERE artist_id = %s", (artist_id,))

    cursor.execute("DELETE FROM artist WHERE artist_id = %s", (artist_id,))

    conn.commit()

    # Reset AUTO_INCREMENT to maintain chronological order

    cursor.execute("ALTER TABLE artist AUTO_INCREMENT = 1")

    cursor.execute("ALTER TABLE artworks AUTO_INCREMENT = 1")

    cursor.execute("ALTER TABLE exhibition AUTO_INCREMENT = 1")

    cursor.execute("ALTER TABLE sales AUTO_INCREMENT = 1")

    conn.commit()

    print("Artist and all related data deleted successfully, and IDs reset.")

    conn.close()

# Search and Display Artist and Related Data

def search_artist():

    artist_id = input("Enter Artist ID or press Enter to search by name: ")

    conn = connect_db()

    cursor = conn.cursor(dictionary=True)

    if artist_id:

        cursor.execute("SELECT * FROM artist WHERE artist_id = %s", (artist_id,))

    else:

        name = input("Enter Artist Name: ")

        cursor.execute("SELECT * FROM artist WHERE name = %s", (name,))

    artist = cursor.fetchall()

    if artist:

        print("\nArtist Details:")

        print(tabulate(artist, headers="keys", tablefmt="grid"))

        # Display Related Data: Artworks, Exhibitions, and Sales

        for table, label in [("artworks", "Artworks"), ("exhibition", "Exhibitions"), ("sales", "Sales")]:

            cursor.execute(f"SELECT * FROM {table} WHERE artist_id = %s", (artist[0]['artist_id'],))

            data = cursor.fetchall()

            if data:

                print(f"\n{label}:")

                print(tabulate(data, headers="keys", tablefmt="grid"))

            else:

                print(f"\n{label}: No records found.")

    else:

        print("Artist not found.")

    conn.close()

def display_tables():

    conn = connect_db()

    cursor = conn.cursor(dictionary=True)

    for table in ["artist", "artworks", "exhibition", "sales"]:

        cursor.execute(f"SELECT * FROM {table}")

        data = cursor.fetchall()

        print(f"\nTable: {table.capitalize()}")

        print(tabulate(data, headers="keys", tablefmt="grid"))

    conn.close()

def main_menu():

    while True:

        print("\nArt Gallery Management System")

        print("1. Add Artist")

        print("2. Add Artwork")

        print("3. Add Exhibition")

        print("4. Add Sale")

        print("5. Search and Display Artist Details")

        print("6. Display All Tables")

        print("7. Update Data")

        print("8. Delete Artist and Related Data")

        print("9. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':

            add_artist()

        elif choice == '2':

            add_artwork()

        elif choice == '3':

            add_exhibition()

        elif choice == '4':

            add_sale()

        elif choice == '5':

            search_artist()

        elif choice == '6':

            display_tables()

        elif choice == '7':

            update_data_menu()

        elif choice == '8':

            delete_artist()

        elif choice == '9':

            print("Exiting program.")

            break

        else:

            print("Invalid choice. Please try again.")

if __name__ == "__main__":

    main_menu()
